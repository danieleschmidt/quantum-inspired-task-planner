# Pre-commit hooks for quantum-inspired-task-planner
# See https://pre-commit.com for more information

repos:
  # General file formatting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88']

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length=88']

  # Linting with ruff (replaces flake8, pyupgrade, etc.)
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.0.287
    hooks:
      - id: ruff
        args: ['--fix', '--exit-non-zero-on-fix']

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-PyYAML
          - types-requests
          - numpy
          - pydantic
        files: ^src/
        exclude: ^tests/

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-f', 'json', '-o', 'bandit-report.json']
        exclude: ^tests/

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        files: ^src/
        args: ['--convention=google']

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.1
    hooks:
      - id: prettier
        types: [yaml]
        exclude: \.github/

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        files: \.(sh|bash)$

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        args: ['--fix']
        exclude: ^CHANGELOG\.md$

  # Python security vulnerabilities
  - repo: https://github.com/PyCQA/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: ['--ignore=51457']  # Ignore specific CVE if needed

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: \.secrets\.baseline$

  # Quantum-specific checks
  - repo: local
    hooks:
      - id: quantum-credentials-check
        name: Check for exposed quantum credentials
        entry: bash -c 'if grep -r "dwave.*token\|quantum.*key\|api.*secret" src/ tests/ --include="*.py"; then echo "‚ùå Potential quantum credentials found in code!"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: large-matrix-check
        name: Check for large test matrices
        entry: bash -c 'if grep -r "np\.random\.rand.*[0-9]{4}" tests/ --include="*.py"; then echo "‚ö†Ô∏è  Large test matrices detected - consider using smaller sizes"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: quantum-import-check
        name: Check for proper quantum import guards
        entry: python scripts/check_quantum_imports.py
        language: system
        files: ^src/quantum_planner/.*\.py$

  # Test-related checks
  - repo: local
    hooks:
      - id: pytest-check
        name: Run fast tests
        entry: pytest tests/unit/ -x --tb=short
        language: system
        pass_filenames: false
        stages: [commit]

      - id: coverage-check
        name: Check test coverage
        entry: bash -c 'coverage run -m pytest tests/unit/ && coverage report --fail-under=80'
        language: system
        pass_filenames: false
        stages: [push]

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    üîß [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'üîÑ [pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-check, coverage-check]  # Skip slow hooks in CI
  submodules: false