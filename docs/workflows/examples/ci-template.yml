# CI/CD Workflow Template
# Copy this file to .github/workflows/ci.yml after repository setup

name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'terragon/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security and code quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run security audit
        run: |
          pip-audit --desc --format=json --output=security-audit.json
          python scripts/calculate_security_score.py

      - name: Quantum credential scan
        run: |
          python security/quantum_credential_scanner.py --scan-dir=src/

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: security-audit.json

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          black --check --diff src/ tests/

      - name: Type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports

      - name: Import sorting with isort
        run: |
          isort --check-only --diff src/ tests/

      - name: Check quantum imports
        run: |
          python scripts/check_quantum_imports.py

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quantum_planner_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantum_planner_test
        run: |
          cp .env.test .env
          python -m pytest --version

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantum_planner_test
        run: |
          python -m pytest tests/unit/ -v --cov=src/ --cov-report=xml --cov-report=term

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantum_planner_test
        run: |
          python -m pytest tests/integration/ -v --cov=src/ --cov-append --cov-report=xml

      - name: Run property-based tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantum_planner_test
        run: |
          python -m pytest tests/property/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance benchmarks
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run performance benchmarks
        run: |
          python -m pytest tests/benchmarks/ -v --benchmark-json=benchmark.json

      - name: Compare with baseline
        run: |
          python scripts/compare_benchmarks.py --current=benchmark.json --baseline=main

      - name: Memory profiling
        run: |
          python tests/benchmarks/memory_profile.py

  # Build and containerization
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: quantum-planner:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm quantum-planner:${{ github.sha }} python -c "import quantum_planner; print('Import successful')"

      - name: Security scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: quantum-planner:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # End-to-end tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quantum_planner_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          cp docker-compose.override.yml.example docker-compose.override.yml

      - name: Run E2E tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantum_planner_e2e
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready
          python -m pytest tests/e2e/ -v --maxfail=1
          docker-compose down

  # Generate and upload SBOM
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate SBOM
        run: |
          python security/sbom_generator.py --output=sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  # Documentation checks
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          cd docs && make html

      - name: Check documentation links
        run: |
          cd docs && make linkcheck

      - name: Validate README
        run: |
          python scripts/validate_readme.py

  # Final validation
  validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, performance, build, e2e, sbom, documentation]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "SBOM: ${{ needs.sbom.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"

      - name: Validate all checks passed
        if: |
          needs.security-scan.result != 'success' ||
          needs.code-quality.result != 'success' ||
          needs.test.result != 'success' ||
          needs.build.result != 'success' ||
          needs.sbom.result != 'success' ||
          needs.documentation.result != 'success'
        run: |
          echo "One or more required checks failed"
          exit 1

      - name: Success notification
        if: success()
        run: |
          echo "✅ All CI checks passed successfully!"